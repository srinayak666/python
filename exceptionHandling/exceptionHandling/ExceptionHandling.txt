#ExceptionHandling: (try,except,rasie)
There are two types of errors that typically occur when writing programs.
The first, known as a syntax error, simply means that the programmer has made a mistake in the structure of a statement or expression.
For example, it is incorrect to write a for statement and forget the colon.

for i in range(10)
SyntaxError: invalid syntax

In this case, the Python interpreter has found that it cannot complete the processing of this
instruction since it does not conform to the rules of the language.


The other type of error, known as a logic error, denotes a situation where the program executes
but gives the wrong result. This can be due to an error in the underlying algorithm or an error in
your translation of that algorithm. In some cases, logic errors lead to very bad situations such
as trying to divide by zero or trying to access an item in a list where the index of the item is
outside the bounds of the list. In this case, the logic error leads to a runtime error that causes
the program to terminate. These types of runtime errors are typically called exceptions.


When an exception occurs, we say that it has been “raised.” You can “handle” the exception
that has been raised by using a try statement. For example, consider the following session
that asks the user for an integer and then calls the square root function from the math library.
If the user enters a value that is greater than or equal to 0, the print will show the square root.
However, if the user enters a negative value, the square root function will report a ValueError
exception.

>>> a_number = int(input("Please enter an integer "))
Please enter an integer -23
>>> print(math.sqrt(a_number))
Traceback (most recent call last):
File "<pyshell#102>", line 1, in <module>
print(math.sqrt(a_number))
ValueError: math domain error
>>>

except block....
We can handle this exception by calling the print function from within a try block.
 A corresponding except block “catches” the exception and prints a message back to the user in
the event that an exception occurs.


It is also possible for a programmer to cause a runtime exception by using the raise statement.
For example, instead of calling the square root function with a negative number, we could have
checked the value first and then raised our own exception. The code fragment below shows
the result of creating a new RuntimeError exception. Note that the program would still
terminate but now the exception that caused the termination is something explicitly created by the programmer.

if a_number < 0:
... raise RuntimeError("You can't use a negative number")
... else:
... print(math.sqrt(a_number))
...
Traceback (most recent call last):
File "<pyshell#20>", line 2, in <module>
raise RuntimeError("You can't use a negative number")
RuntimeError: You can't use a negative number
>>>


The try statement works as follows.

First, the try clause (the statement(s) between the try and except keywords) is executed.

If no exception occurs, the except clause is skipped and execution of the try statement is finished.

If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, the except clause is executed, and then execution continues after the try statement.

If an exception occurs which does not match the exception named in the except clause, it is passed on to outer try statements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above.

A try statement may have more than one except clause, to specify handlers for different exceptions. At most one handler will be executed. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same try statement. An except clause may name multiple exceptions as a parenthesized tuple, for example:

... except (RuntimeError, TypeError, NameError):
...     pass

refer: ExceptionHandling.py